package template

import (
	"fmt"
	"strings"
	"time"
)

// Renderer handles template rendering with variable substitution
type Renderer struct {
	defaultVars map[string]string
}

// NewRenderer creates a new template renderer instance
func NewRenderer() *Renderer {
	return &Renderer{
		defaultVars: getDefaultVariables(),
	}
}

// RenderTemplate renders a template with the provided variables
func (r *Renderer) RenderTemplate(template *Template, vars map[string]string) (string, error) {
	if template == nil {
		return "", fmt.Errorf("template is nil")
	}

	// Validate that all required variables are provided
	if err := r.validateVariables(template, vars); err != nil {
		return "", err
	}

	// Merge provided variables with default variables
	allVars := r.mergeVariables(vars)

	// Perform variable substitution
	return r.substituteVariables(template.Content, allVars), nil
}

// validateVariables ensures all required variables are provided and non-empty
func (r *Renderer) validateVariables(template *Template, vars map[string]string) error {
	if vars == nil {
		vars = make(map[string]string)
	}

	// Merge with default variables for validation
	allVars := r.mergeVariables(vars)

	missingVars := make([]string, 0)
	emptyVars := make([]string, 0)

	for _, requiredVar := range template.RequiredVars {
		// Skip validation for auto-generated variables
		if r.isAutoGeneratedVar(requiredVar) {
			continue
		}

		value, exists := allVars[requiredVar]
		if !exists {
			missingVars = append(missingVars, requiredVar)
		} else if strings.TrimSpace(value) == "" {
			emptyVars = append(emptyVars, requiredVar)
		}
	}

	if len(missingVars) > 0 {
		return fmt.Errorf("missing required variables: %v", missingVars)
	}

	if len(emptyVars) > 0 {
		return fmt.Errorf("empty required variables: %v", emptyVars)
	}

	return nil
}

// substituteVariables performs the actual string replacement of variables
func (r *Renderer) substituteVariables(content string, vars map[string]string) string {
	result := content

	for varName, value := range vars {
		placeholder := "{" + varName + "}"
		// Sanitize the value before substitution
		sanitizedValue := r.sanitizeVariableValue(value)
		result = strings.ReplaceAll(result, placeholder, sanitizedValue)
	}

	return result
}

// mergeVariables combines provided variables with default variables
func (r *Renderer) mergeVariables(vars map[string]string) map[string]string {
	merged := make(map[string]string)

	// Start with default variables
	for key, value := range r.defaultVars {
		merged[key] = value
	}

	// Override with provided variables
	for key, value := range vars {
		merged[key] = value
	}

	// Ensure CURRENT_DATE is always up-to-date
	merged[VarCurrentDate] = time.Now().Format("2006-01-02")

	return merged
}

// getDefaultVariables returns common default variable values
func getDefaultVariables() map[string]string {
	return map[string]string{
		VarCurrentDate: time.Now().Format("2006-01-02"),
	}
}

// isAutoGeneratedVar checks if a variable is automatically generated
func (r *Renderer) isAutoGeneratedVar(varName string) bool {
	autoVars := []string{VarCurrentDate}

	for _, autoVar := range autoVars {
		if varName == autoVar {
			return true
		}
	}

	return false
}

// sanitizeVariableValue ensures variable values are safe for substitution
func (r *Renderer) sanitizeVariableValue(value string) string {
	// Remove any control characters and normalize whitespace
	value = strings.ReplaceAll(value, "\r\n", "\n")
	value = strings.ReplaceAll(value, "\r", "\n")

	// Trim excessive whitespace but preserve intentional formatting
	lines := strings.Split(value, "\n")
	for i, line := range lines {
		lines[i] = strings.TrimRight(line, " \t")
	}

	return strings.Join(lines, "\n")
}

// GetRequiredVariables extracts required variables from template content,
// excluding auto-generated variables
func (r *Renderer) GetRequiredVariables(template *Template) []string {
	required := make([]string, 0)

	for _, varName := range template.RequiredVars {
		if !r.isAutoGeneratedVar(varName) {
			required = append(required, varName)
		}
	}

	return required
}

// PreviewTemplate returns a preview of the template with placeholder values
func (r *Renderer) PreviewTemplate(template *Template) (string, error) {
	if template == nil {
		return "", fmt.Errorf("template is nil")
	}

	previewVars := make(map[string]string)

	// Create preview values for all required variables
	for _, varName := range template.RequiredVars {
		if !r.isAutoGeneratedVar(varName) {
			previewVars[varName] = fmt.Sprintf("[%s]", strings.ToLower(varName))
		}
	}

	return r.RenderTemplate(template, previewVars)
}

// ValidateVariableNames checks if variable names follow the expected format
func (r *Renderer) ValidateVariableNames(vars map[string]string) error {
	for varName := range vars {
		if !variablePattern.MatchString("{" + varName + "}") {
			return fmt.Errorf("invalid variable name format: %s", varName)
		}
	}

	return nil
}
